<link rel="shortcut icon" type="image/x-icon" href="docs/images/favicon.ico" />
<link rel="stylesheet" type="" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet-dvf/0.3.1/css/dvf.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css"
    integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
    crossorigin="" />
<link rel="stylesheet" type="" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.2.3/leaflet.draw.css">
<!-- <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"
    integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg=="
    crossorigin=""></script> -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.css">  
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.js"></script>

<script src="/js/jqueryautocomplete.js"></script>

<script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.2.3/leaflet.draw.js"></script> -->
<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-dvf/0.3.1/leaflet-dvf.min.js"></script>-->
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-dvf/0.3.1/leaflet-dvf.markers.min.js"></script> -->



<style>
    html,
    body {
        height: 100%;
        margin: 0;
    }

    #map {
        width: 100%;
        height: 700px;
    }

    .info {
        padding: 6px 8px;
        font: 14px/16px Arial, Helvetica, sans-serif;
        background: white;
        background: rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        
    }
    .tabla {
        padding: 6px 8px;
        font: 10px/12px Arial, Helvetica, sans-serif;
        background: white;
        background: rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        width: 75%;
        
    }

    .info h4 {
        margin: 0 0 5px;
        color: #777;
    }

    .legend {
        text-align: left;
        line-height: 18px;
        color: #555;
    }

    #map2 {
        width: 90%;
        height: 800px;
        box-shadow: 5px 5px 5px #888;
    }

    .legend i {
        width: 18px;
        height: 18px;
        float: left;
        margin-right: 8px;
        opacity: 0.7;
    }

    .awesome-marker i {
        font-size: 18px;
        margin-top: 8px;
    }

    .zonaLabel {
        background: rgba(255, 255, 255, 0);
        border: 0;

        border-radius: 0px;
        font-family: Arial, Helvetica, sans-serif;
        box-shadow: 0 0px 0px;
    }
</style>

<!-- <div class="container">
    <h1>Mapa de Nuestra señora de La Paz</h1>
</div> -->
<div id='map'></div>




<script src="/js/geoJsonC2.js"></script>
<script src="/js/geoJsonDistritosC2.js"></script>
<script src="/js/geoJsonZonasC2.js"></script>



<script>
    var auxRecintos = <%- JSON.stringify(recintos) %>;
    var auxZonas = <%- JSON.stringify(zonas) %>;
    var auxDistritos = <%- JSON.stringify(distritos) %>;
    var auxCircunscripciones = <%- JSON.stringify(circunscripciones) %>;
    var auxelecciones = <%- JSON.stringify(elecciones) %>;
    var nombreelec;
    if(auxelecciones == 1){
        nombreelec = "Elecciones Generales 2005 ";
    }else if(auxelecciones == 3){
        nombreelec = "Elecciones Generales 2009";
    }else{
        nombreelec = "Elecciones Generales 2014";
    }
    //console.log(auxeleccion);
    //console.log(nombreelec);

    var map = L.map('map',{zoomControl:false}).setView([-16.51773269488567, -68.11798095703126], 12);

    // L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        attribution: '',
        // id: 'mapbox.light'
    }).addTo(map);

    var tabla = L.control();

    tabla.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'tabla');
        var datos = [];
        var colores1 = [0,0,0];
        var Recintos1 = [[],[],[]];
        auxRecintos.forEach(recinto => {
            var datosRecinto = [];
            //if(recinto.idZona != null)
            var Nzona, Ndistrito, Ncircunscripcion;
            var zona = null;
            if(recinto.idZona != null ){
                zona = (auxZonas.filter(dato => dato.id == recinto.idZona ))[0];
                Nzona = zona.nombre;
            } else{
                Nzona = "-";
            }
            var distrito = null;
            if(zona.idDistrito != null ){
                distrito = (auxDistritos.filter(dato => dato.id == zona.idDistrito ))[0];
                var auxnombred = distrito.nombre;
                Ndistrito = auxnombred.replace("DISTRITO","D");
                
            }else{
                Ndistrito = "-";
            }
            var circunscripcion = null;
            if(distrito.idCircunscripcion != null ){
                circunscripcion = (auxCircunscripciones. filter(dato => dato.id == distrito.idCircunscripcion ))[0];
                Ncircunscripcion = circunscripcion.nombre;
            }else{
                Ncircunscripcion = "7";
            }
            datosRecinto.push('C_'+Ncircunscripcion);
            datosRecinto.push(Ndistrito);
            datosRecinto.push(Nzona);
            datosRecinto.push(recinto.nombre);
            
            //console.log(recinto);
            //console.log(zona);
            //console.log(distrito);
            //console.log(circunscripcion);
            //console.log("aaa");
            
            
            //console.log("bbb");
            ////var auxmesa = recinto.mesas.filter(dato => dato.idEleccion == 1 );
            var totalValidos = 0;
            var totalEmitidos = 0;
            var auxmesas = recinto.mesas;
            
            //console.log(auxmesas);
            auxmesas.forEach( mesa => {
                totalValidos += parseInt(mesa.MAS);
                totalEmitidos += parseInt(mesa.votosValidos);
                
            });
            var promedio = 0;
            var cantidad = 0;
            if(totalEmitidos>0){
                var porcentaje1 = ( 100 * totalValidos ) / totalEmitidos;
                //console.log(porcentaje1+" "+totalValidos[0]+" "+totalEmitidos[0]);
                var auxcolor1 = 2;
                if(porcentaje1 <= 33){
                    datosRecinto.push("ROJO");
                    auxcolor1 = 0;
                }else if(porcentaje1 <= 66){
                    datosRecinto.push("VERDE");
                    auxcolor1 = 1;
                }else{
                    datosRecinto.push("AZUL");
                }
                promedio += porcentaje1;
                cantidad++;
                var roundpor1= Math.round(porcentaje1 * 100) / 100;
                datosRecinto.push(roundpor1+"%");
                colores1[auxcolor1]++;
                Recintos1[auxcolor1].push(recinto);
            }else{
                datosRecinto.push("No habilitada");
            }
            
            if(cantidad > 0){
                promedio = promedio / cantidad;
                var roundprom = Math.round(promedio * 100) / 100;
                //datosRecinto.push(roundprom+"%");
                datos.push(datosRecinto);
            }
        });
        //console.log("caaaaaarlos");
        //console.log(colores1);//fd0000
        //console.log(colores2);//046500
        //console.log(colores3);//143a83
        
        $(document).ready(function() {
            var table = $('#example').DataTable( {
                "language": {
                    
                    "sProcessing":     "Procesando...",
                    "sLengthMenu":     "PORCENTAJE POR RECINTOS",
                    "sZeroRecords":    "No se encontraron Recinto",
                    "sEmptyTable":     "Ningún dato disponible en esta tabla",
                    "sInfo":           "Mostrando Recintos del _START_ al _END_ de un total de _TOTAL_ Recintos",
                    "sInfoEmpty":      "Mostrando Recintos del 0 al 0 de un total de 0 Recintos",
                    "sInfoFiltered":   "(filtrado de un total de _MAX_ Recintos)",
                    "sInfoPostFix":    "",
                    "sSearch":         "Buscar:",
                    "sUrl":            "",
                    "sInfoThousands":  ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst":    "Primero",
                        "sLast":     "Último",
                        "sNext":     "Siguiente",
                        "sPrevious": "Anterior"
                    },

                    "oAria": {
                        "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    }            
                },
                // initComplete: function () {
                    
                //     this.api().columns().every( function () {
                //         var column = this;
                //         console.log("carlooos");
                //         var select = $('<select><option value=""></option></select>')
                //             .appendTo( $(column.footer()).empty() )
                //             .on( 'change', function () {
                //                 console.log("carlos2222")
                //                 var val = $.fn.dataTable.util.escapeRegex(
                //                     $(this).val()
                //                 );
        
                //                 column
                //                     .search( val ? '^'+val+'$' : '', true, false )
                //                     .draw();
                //             } );
        
                //         column.data().unique().sort().each( function ( d, j ) {
                //             select.append( '<option value="'+d+'">'+d+'</option>' )
                //         } );
                //     } );
                // },
                pageLength: 8,
               
                'rowCallback': function(row, data, index){
                    if(data[5][0] != 'N'){
                        var auxdata = data[5].slice(0,-1);
                        //console.log(auxdata);
                        $(row).find('td:eq(5)').css('color', 'white');
                        if(auxdata <= 33){
                            $(row).find('td:eq(5)').css('background-color', 'red');
                            $(row).find('td:eq(4)').css('color', 'red');
                        }else if(auxdata <= 66){
                            $(row).find('td:eq(5)').css('background-color', 'green');
                            $(row).find('td:eq(4)').css('color', 'green');
                        }else{
                            $(row).find('td:eq(5)').css('background-color', 'blue');
                            $(row).find('td:eq(4)').css('color', 'blue');
                        }
                    }
                    
                },
                data: datos,
                columns: [

                    { title: "C" },
                    { title: "Distrito" },
                    { title: "Zona" },
                    { title: "Recinto" },
                    { title: "Color" },
                    { title: "Porcentaje" },
                ]
            } );
            
        } );
        div.innerHTML = '<table id="example" class="display" width="100%"></table>'
        //div.innerHTML = '<h4>Nuestra Señora de La Paz - GENERAL</h4>';
        return div;
    };

    tabla.addTo(map);

    // control that shows state info on hover
   

    function getRandomColor(zona) {
        // console.log('ZONA:', zona);
        var color = '';
        if (zona) {
            var letters = '0123456789ABCDEF';
            color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
        }

        return color;
    }

    function getOpacidad(zona) {
        // console.log('ZONA:', zona);
        var color = 0.0;
        if (zona) {
            color = 0.5
        }

        return color;
    }

    function style(feature) {
        // console.log('FEATURE', feature)
        return {
            weight: 2,
            opacity: 1,
            color: 'black',
            dashArray: '5',
            fillOpacity: getOpacidad(feature.properties.zona),
            // fillColor: getColor(feature.properties.density)
            fillColor: getRandomColor(feature.properties.zona)
        };
    }

    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.8
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }

        info.update(layer.feature.properties);
    }

    var geojsonC;
    var geojsonD;
    var geojsonZ;
    var auxMarca = {};




    function resetHighlight(e) {
        geojsonC.resetStyle(e.target);
        info.update();
    }

    function zoomToFeature(e) {
        // console.log('E', e.target)

        // var auxDistrito = auxDistritos.filter(dato => dato.nombre == e.target.feature.properties.zona)
        // var zonas = auxZonas.filter(dato => dato.idDistrito == auxDistrito[0].id);

        //console.log('ZONAS', zonas);


        map.fitBounds(e.target.getBounds());

    }
    map.on('zoomend', function () {
        console.log('ZOOM:', map.getZoom())
        if (map.getZoom() < 12) {
            if (map.hasLayer(geojsonC)) {
                map.removeLayer(geojsonC);
            } else {
                console.log("no point layer active");
            }
        } else if (map.getZoom() >= 12 && map.getZoom() < 12.5) {
            if (map.hasLayer(geojsonC)) {
                console.log("entre 11 y 12");
            } else {
                if (map.hasLayer(geojsonD)) {

                    map.removeLayer(geojsonD)
                }
                map.addLayer(geojsonC);
            }
        } else if (map.getZoom() >= 12.5 && map.getZoom() <= 14) {
            if (map.hasLayer(geojsonD)) {
                console.log("entre 13 y 14");
            } else {
                map.removeLayer(geojsonC)
                if (map.hasLayer(geojsonZ)) {
                    map.removeLayer(geojsonZ)
                    //removerMarcas()
                }
                map.addLayer(geojsonD);
            }
        } else if (map.getZoom() >= 14.1) {
            if (map.hasLayer(geojsonZ)) {
                console.log("entre 15 para arriva");
            } else {
                map.removeLayer(geojsonD)
                map.addLayer(geojsonZ);
                // generarMarcas();
            }
        }
    });

    function onEachFeature(feature, layer) {
        // console.log('LAYER:',layer)

        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: zoomToFeature
        });
        layer.bindTooltip(cambiarNombre(feature.properties), {
            direction: 'center',
            className: 'zonaLabel',
            permanent: true
        });
    }
    function cambiarNombre(dato) {
        if (dato.tipo == 'circunscripcion') {

            return 'C_' + dato.zona;
        } else {
            return dato.zona
        }
    }

    geojsonC = L.geoJson(datoGeoJsonC, {
        style: style,
        onEachFeature: onEachFeature
    }).addTo(map);
    geojsonD = L.geoJson(datoGeoJsonD, {
        style: style,
        onEachFeature: onEachFeature
    })
    geojsonZ = L.geoJson(geoZonasCompleto, {
        style: style,
        onEachFeature: onEachFeature
    })


    map.attributionControl.addAttribution('');


  

    var titulo = L.control({
        position: 'topleft'
    });

    titulo.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info titulo')
        div.innerHTML = '<h4>VOTACIÓN EMITIDA POR EL MAS IPSP</h4><br><h4>'+nombreelec+'</h4>';
        return div;
    };

    titulo.addTo(map);

  

    var verdeIcon = new L.Icon({
        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });
    var azulIcon = new L.Icon({
        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    var rojoIcon = new L.Icon({
        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    const rojo = '#fd0000'
    const verde = '#046500'
    const azul = '#143a83';

    const markerHtmlStylesRojo = `
        background-color: ${rojo};
        width: 1.1rem;
        height: 1.1rem;
        display: block;
        left: -1.5rem;
        top: -1.5rem;
        border-radius: 3rem 3rem 0;
        transform: rotate(45deg);
        border: 1px solid #FFFFFF`

    const puntoRojo = L.divIcon({
        className: "my-custom-pin",
        iconAnchor: [0, 24],
        labelAnchor: [-6, 0],
        popupAnchor: [0, -36],
        html: `<span style="${markerHtmlStylesRojo}" />`
    })

    const markerHtmlStylesVerde = `
        background-color: ${verde};
        width: 1.1rem;
        height: 1.1rem;
        display: block;
        left: -1.5rem;
        top: -1.5rem;
        border-radius: 3rem 3rem 0;
        transform: rotate(45deg);
        border: 1px solid #FFFFFF`

    const puntoVerde = L.divIcon({
        className: "my-custom-pin",
        iconAnchor: [0, 14],
        labelAnchor: [-6, 0],
        popupAnchor: [0, -36],
        html: `<span style="${markerHtmlStylesVerde}" />`
    })

    const markerHtmlStylesAzul = `
        background-color: ${azul};
        width: 1.1rem;
        height: 1.1rem;
        display: block;
        left: -1.5rem;
        top: -1.5rem;
        border-radius: 3rem 3rem 0;
        transform: rotate(45deg);
        border: 1px solid #FFFFFF`

    const puntoAzul = L.divIcon({
        className: "my-custom-pin",
        iconAnchor: [0, 24],
        labelAnchor: [-6, 0],
        popupAnchor: [0, -36],
        html: `<span style="${markerHtmlStylesAzul}" />`
    })

    function removerMarcas() {
        auxRecintos.forEach(function (recinto) {
            map.removeLayer(auxMarca['marca-' + recinto.id])
        }, this);

    }
    var cantidadAzules = 0;
    var cantidadVerdes = 0;
    var cantidadRojos =0;

    function generarMarcas() {
        auxRecintos.forEach(function (recinto) {
            var sw = false;
            var sumaEmitidos = 0;
            var sumaValidos = 0;
            var sumaInscritos = 0;
            var sumaMAS = 0;
            recinto.mesas.forEach(function (mesa) {
                sumaEmitidos += parseInt(mesa.votosEmitidos);
                sumaValidos += parseInt(mesa.votosValidos);
                sumaInscritos += parseInt(mesa.inscritos)
                sumaMAS +=parseInt(mesa.MAS) 

            }, this);

            var porcentajeEmitidos = ((100 * sumaEmitidos) / sumaInscritos).toFixed(2);
            var porcentajeValidos = ((100 * sumaValidos) / sumaInscritos).toFixed(2);

            var porcentMasValidos = ((100 * sumaMAS) / sumaValidos).toFixed(2);

            var auxIcon = puntoVerde;
            // console.log(recinto.nombre, porcentajeEmitidos)
            // console.log('INSCRITOS :' + sumaInscritos + ' EMITIDOS :' + sumaEmitidos)
            // console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++')
            if (porcentMasValidos <=33) {
                auxIcon = puntoRojo;
                cantidadRojos++;
            } else if (porcentMasValidos > 66) {
                auxIcon = puntoAzul;
                cantidadAzules++
            }else if(porcentMasValidos >33 && porcentMasValidos <=66){
                auxIcon = puntoVerde
                cantidadVerdes++;
            }


            ///////////////////////////////// INICIO ///////////////////////////////////


            if (recinto.latitud != null || recinto.longitud != null) {
                var sw = false;
                auxMarca['marca-' + recinto.id] = L.marker([recinto.latitud, recinto.longitud], {
                    icon: auxIcon
                })
                    .addTo(map);


                var sortMesas = recinto.mesas.sort(function (a, b) {
                    // a must be equal to b
                    return a.nombre - b.nombre;
                });

                var datoMesas = '';
                var totalInscritos = 0;
                var totalValidos = 0;
                var totalBlancos = 0;
                var totalNulos = 0;
                var totalEmitidos = 0;

                var totalMAS = 0;
                var totalUN = 0;
                var totalFREPAB = 0;
                var totalMIP= 0;
                var totalNFR = 0;
                var totalMNR = 0;
                var totalPODEMOS = 0;
                var totalCONVERGENCIA = 0;
                var totalPULSO = 0;
                var totalMUSPA = 0;
                var totalBSD = 0;
                var totalGENTE =0;
                var totalAS =0;
                var totalPDC = 0;
                var totalPVB_IEP =0;
                var totalMSM = 0;
                var totalUD = 0;
                sortMesas.forEach(function (mesa) {
                    totalInscritos = totalInscritos + parseInt(mesa.inscritos);
                    totalValidos = totalValidos + parseInt(mesa.votosValidos);
                    totalBlancos = totalBlancos + parseInt(mesa.votosBlancos);
                    totalNulos = totalNulos + parseInt(mesa.votosNulos);
                    totalEmitidos = totalEmitidos + parseInt(mesa.votosEmitidos);
                    totalMAS  = totalMAS +parseInt(mesa.MAS)
                    totalUN  = totalUN +parseInt(mesa.UN)
                    totalFREPAB  = totalFREPAB +parseInt(mesa.FREPAB)
                    totalMIP  = totalMIP +parseInt(mesa.MIP)
                    totalNFR  = totalNFR +parseInt(mesa.NRF)
                    totalMNR  = totalMNR +parseInt(mesa.MNR)
                    totalPODEMOS  = totalPODEMOS +parseInt(mesa.PODEMOS)
                    totalCONVERGENCIA  = totalCONVERGENCIA +parseInt(mesa.CONVERGENCIA)
                    totalPULSO  = totalPULSO +parseInt(mesa.PULSO)
                    totalMUSPA  = totalMUSPA +parseInt(mesa.MUSPA)
                    totalBSD  = totalBSD +parseInt(mesa.BSD)
                    totalGENTE  = totalGENTE +parseInt(mesa.GENTE)
                    totalAS  = totalAS +parseInt(mesa.AS)
                    totalPDC  = totalPDC +parseInt(mesa.PDC)
                    totalPVB_IEP  = totalPVB_IEP +parseInt(mesa.PVB_IEP)
                    totalMSM  = totalMSM +parseInt(mesa.MSM)
                    totalUD  = totalUD +parseInt(mesa.UD)


                    datoMesas = datoMesas + '<tr>' +
                        '<th>' + mesa.nombre + '</th>' +
                        //'<th>' + mesa.inscritos + '</th>' +
                        
                        '<th>' + mesa.MAS + '</th>' +

                        (totalUN ? '<th>' + mesa.UN + '</th>':'')+
                        (totalFREPAB ? '<th>' + mesa.FREPAB + '</th>':'')+
                        (totalMIP ? '<th>' + mesa.MIP + '</th>':'')+
                        (totalNFR ? '<th>' + mesa.NRF + '</th>':'')+
                        (totalMNR ? '<th>' + mesa.MNR + '</th>':'')+
                        (totalPODEMOS ? '<th>' + mesa.PODEMOS + '</th>':'')+
                        (totalCONVERGENCIA ? '<th>' + mesa.CONVERGENCIA + '</th>':'')+
                        (totalPULSO ? '<th>' + mesa.PULSO + '</th>':'')+
                        (totalMUSPA ? '<th>' + mesa.MUSPA + '</th>':'')+
                        (totalBSD ? '<th>' + mesa.BSD + '</th>':'')+
                        (totalGENTE ? '<th>' + mesa.GENTE + '</th>':'')+
                        (totalAS ? '<th>' + mesa.AS + '</th>':'')+
                        (totalPDC ? '<th>' + mesa.PDC + '</th>':'')+
                        (totalPVB_IEP ? '<th>' + mesa.PVB_IEP + '</th>':'')+
                        (totalMSM ? '<th>' + mesa.MSM + '</th>':'')+
                        (totalUD ? '<th>' + mesa.UD + '</th>':'')+
                        

                        '<th>' + mesa.votosValidos + '</th>' +
                        '<th>' + mesa.votosBlancos + '</th>' +
                        '<th>' + mesa.votosNulos + '</th>' +
                        '<th>' + mesa.votosEmitidos + '</th>' +
                        '<th>' + ((100 * mesa.MAS) / mesa.votosValidos).toFixed(2) + '%</th>' +
              
                        '</tr>'

                })
                datoMesas = datoMesas + '<tr  class="table-primary">' +
                    '<th>TOTAL </th>' +
                    //'<th>' + totalInscritos + '</th>' +
                    '<th>' + totalMAS + '</th>' +
                   (totalUN ?'<th>' +totalUN + '</th>':'')+
                   (totalFREPAB ? '<th>' + totalFREPAB + '</th>':'')+
                   (totalMIP ? '<th>' + totalMIP + '</th>':'')+
                   (totalNFR ? '<th>' + totalNRF + '</th>':'')+
                   (totalMNR ? '<th>' + totalMNR + '</th>':'')+
                   (totalPODEMOS ? '<th>' + totalPODEMOS + '</th>':'')+
                   (totalCONVERGENCIA ? '<th>' + totalCONVERGENCIA + '</th>':'')+
                   (totalPULSO ? '<th>' + totalPULSO + '</th>':'')+
                   (totalMUSPA ? '<th>' + totalMUSPA + '</th>':'')+
                   (totalBSD ? '<th>' + totalBSD + '</th>':'')+
                   (totalGENTE ? '<th>' + totalGENTE + '</th>':'')+
                   (totalAS ? '<th>' + totalAS + '</th>':'')+
                   (totalPDC ? '<th>' + totalPDC + '</th>':'')+
                   (totalPVB_IEP ? '<th>' + totalPVB_IEP + '</th>':'')+
                   (totalMSM ? '<th>' + totalMSM + '</th>':'')+
                   (totalUD ? '<th>' + totalUD + '</th>':'')+
                    '<th>' + totalValidos + '</th>' +
                    '<th>' + totalBlancos + '</th>' +
                    '<th>' + totalNulos + '</th>' +
                    '<th>' + totalEmitidos + '</th>' +
                    '<th>' + ((100 * totalMAS) / totalValidos).toFixed(2) + '%</th>' +
       

                    '</tr>';
                // console.log('DATO MESAS', datoMesas)


                var zona = auxZonas.filter(data => {
                    return data.id == recinto.idZona
                })
                // console.log('ZONA AAA', zona)
                var distrito = auxDistritos.filter(data => {
                    return data.id == zona[0].idDistrito
                })
                var circunscripcion = auxCircunscripciones.filter(data => {
                    return data.id == distrito[0].idCircunscripcion
                })

                var collapse =
                    '<div class="card">' +
                    ' <div class="card-body">' +
                    ' <h6>' + recinto.nombre + '</h6><br>' +
                    'Circunscripcion: ' + circunscripcion[0].nombre + ' - ' + distrito[0].nombre + ' - Zona:' + zona[0].nombre +
                    '<table class="table">' +
                    '<thead>' +
                    '<th>MESA</th>' +
                   //'<th>Inscritos</th>' +
                   '<th>MAS</th>' +
                  (totalUN ?'<th>UN</th>':'')+
                  (totalFREPAB ? '<th>FREPAB</th>':'')+
                  (totalMIP ? '<th>MIP</th>':'')+
                  (totalNFR ? '<th>NFR</th>':'')+
                  (totalMNR ? '<th>MNR</th>':'')+
                  (totalPODEMOS ? '<th>PODEMOS</th>':'')+
                  (totalCONVERGENCIA ? '<th>CONVERGENCIA</th>':'')+
                  (totalPULSO ? '<th>PULSO</th>':'')+
                  (totalMUSPA ? '<th>MUSPA</th>':'')+
                  (totalBSD ? '<th>BSD</th>':'')+
                  (totalGENTE ? '<th>GENTE</th>':'')+
                  (totalAS ? '<th>AS</th>':'')+
                  (totalPDC ? '<th>PDC</th>':'')+
                  (totalPVB_IEP ? '<th>PVB_IEP</th>':'')+
                  (totalMSM ? '<th>MSM</th>':'')+
                  (totalUD ? '<th>UD</th>':'')+

                    '<th>Votos Validos</th>' +
                    '<th>Votos Blancos</th>' +
                    '<th>Votos Nulos</th>' +
                    '<th>Votos Emitidos</th>' +
                    '<th> % MAS</th>' +
                   
                    '</thead>' +
                    '<tbody>' +
                    datoMesas +
                    '</tbody>' +
                    ' </table>' +

                    '</div>' +
                    '</div>';
                // console.log('COLLAPSE', collapse)
                auxMarca['marca-' + recinto.id].bindPopup(
                    collapse, {
                        closeOnClick: false,
                        autoClose: false,
                        // minWdth: '1000',
                        maxWidth: 'auto',
                        // autoPan: true,
                        // className: 'custom'
                    })
                // console.log("MARKA", auxMarca['marca-' + recinto.id])
            }


            ///////////////////////////////////FIN /////////////////////////////////

        }, this);

    }
    var info = L.control({
        position: 'topleft'
    });
    
    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div;
    };

    info.update = function (props) {
        var textRecintos = '';
        var totalInscritos = 0;
        var totalValidos = 0;
        var totalBlancos = 0;
        var totalNulos = 0;
        var totalEmitidos = 0;
        var totalMAS =0;
        if (props) {
            console.log('TIPO:', props.tipo)
            if (props.tipo == 'zona') {
                var zona = auxZonas.filter(dato => dato.nombre == props.zona);
                var distrito = auxDistritos.filter(dato => dato.id == zona[0].idDistrito);

                var circunscripcion = auxCircunscripciones.filter(dato => dato.id == distrito[0].idCircunscripcion)

                var recintos = auxRecintos.filter(dato => dato.idZona == zona[0].id);

                recintos.forEach(function (recinto) {

                    recinto.mesas.forEach(function (mesa) {
                        totalInscritos += parseInt(mesa.inscritos);
                        totalEmitidos += parseInt(mesa.votosEmitidos);
                        totalValidos += parseInt(mesa.votosValidos);
                        totalBlancos += parseInt(mesa.votosBlancos);
                        totalNulos += parseInt(mesa.votosNulos);
                        totalMAS += parseInt(mesa.MAS);
                    }, this);


                }, this);

                textRecintos += '<b>Zona : ' + zona[0].nombre + '</b>' +
                    '<ul class="list-group">' +
                    
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalEmitidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Válidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalValidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                        'MAS' +
                        ' <span class="badge badge-dark badge-pill">' + totalMAS + '</span>' +
                        '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + totalBlancos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + totalNulos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% MAS' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalMAS) / totalValidos).toFixed(2) + '</span>' +
                    '</li>' +
                    '</ul>';
            } else if (props.tipo == 'distrito') {
                console.log('DISTIRTO,', props.zona)
                var distrito = auxDistritos.filter(dato => dato.nombre == props.zona);

                var circunscripcion = auxCircunscripciones.filter(dato => dato.id == distrito[0].idCircunscripcion)

                var zonas = auxZonas.filter(dato => dato.idDistrito == distrito[0].id);

                zonas.forEach(function (zona) {
                    var recintos = auxRecintos.filter(dato => dato.idZona == zona.id)
                    recintos.forEach(function (recinto) {

                        recinto.mesas.forEach(function (mesa) {
                            totalInscritos += parseInt(mesa.inscritos);
                            totalEmitidos += parseInt(mesa.votosEmitidos);
                            totalValidos += parseInt(mesa.votosValidos);
                            totalBlancos += parseInt(mesa.votosBlancos);
                            totalNulos += parseInt(mesa.votosNulos);
                            totalMAS += parseInt(mesa.MAS)
                        }, this);


                    }, this);

                }, this);


                textRecintos += '<b>Distrito : ' + distrito[0].nombre + '</b>' +
                '<ul class="list-group">' +
                    
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalEmitidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Válidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalValidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                        'MAS' +
                        ' <span class="badge badge-dark badge-pill">' + totalMAS + '</span>' +
                        '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + totalBlancos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + totalNulos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% MAS' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalMAS) / totalValidos).toFixed(2) + '</span>' +
                    '</li>' +
                    '</ul>';
            } else {
                console.log('Circunscripcion,', props.zona)

                var circunscripcion = auxCircunscripciones.filter(dato => dato.nombre == props.zona)

                var distritos = auxDistritos.filter(dato => dato.idCircunscripcion == circunscripcion[0].id);


                distritos.forEach(function (distrito) {
                    var zonas = auxZonas.filter(dato => dato.idDistrito == distrito.id)
                    zonas.forEach(function (zona) {
                        var recintos = auxRecintos.filter(dato => dato.idZona == zona.id)
                        recintos.forEach(function (recinto) {

                            recinto.mesas.forEach(function (mesa) {
                                totalInscritos += parseInt(mesa.inscritos);
                                totalEmitidos += parseInt(mesa.votosEmitidos);
                                totalValidos += parseInt(mesa.votosValidos);
                                totalBlancos += parseInt(mesa.votosBlancos);
                                totalNulos += parseInt(mesa.votosNulos);
                                totalMAS += parseInt(mesa.MAS)
                            }, this);


                        }, this);

                    }, this);
                }, this);


                textRecintos += '<b>Circunscripción : ' + circunscripcion[0].nombre + '</b>' +
                '<ul class="list-group">' +
                    
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalEmitidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Válidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalValidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                        'MAS' +
                        ' <span class="badge badge-dark badge-pill">' + totalMAS + '</span>' +
                        '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + totalBlancos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + totalNulos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% MAS' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalMAS) / totalValidos).toFixed(2) + '</span>' +
                    '</li>' +
                    '</ul>';
            }





        }
        // this._div.innerHTML = '<h4>Concentración de votos</h4>' + (props ?
        //     '<b>Circunscripción :  ' + circunscripcion[0].nombre + '</b><br /><b>Distrito :  ' + distrito[0].nombre + '</b><br /><b>Zona :  ' + props.zona + '</b><br /> Recintos ' + textRecintos + ' ' : '');
        
        
        this._div.innerHTML = '<h4>Información</h4>' + (props ?
            textRecintos : '');
    };

    info.addTo(map);
    generarMarcas();

      var legend = L.control({
        position: 'bottomright'
    });

    legend.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info legend'),
            grades = [0, 10, 20, 50, 100, 300, 500, 1000],
            labels = [],
            from, to;
        labels.push('Concentración');

        labels.push('<span class="badge badge-dark badge-pill">'+cantidadAzules+'</span><i style="background:blue"></i> ' +
            '&ndash; Alta 66 - 100');
            labels.push('<span class="badge badge-dark badge-pill">'+cantidadVerdes+'</span><i style="background:green"></i> ' +
            '&ndash; Media 33 - 66');
            labels.push('<span class="badge badge-dark badge-pill">'+cantidadRojos+'</span><i style="background:red"></i> ' +
            '&ndash; Baja 0 - 33');
            labels.push('<span class="badge badge-dark badge-pill">'+(cantidadRojos+cantidadVerdes+cantidadAzules)+'</span> ' +
            '&ndash; total Recintos');


        div.innerHTML = labels.join('<br>');
        return div;
    };

    legend.addTo(map);
</script>

<script>
</script>