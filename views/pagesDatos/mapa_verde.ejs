<link rel="shortcut icon" type="image/x-icon" href="docs/images/favicon.ico" />
<link rel="stylesheet" type="" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet-dvf/0.3.1/css/dvf.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css"
    integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
    crossorigin="" />
<link rel="stylesheet" type="" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.2.3/leaflet.draw.css">
<!-- <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"
    integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg=="
    crossorigin=""></script> -->
<script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.2.3/leaflet.draw.js"></script> -->
<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-dvf/0.3.1/leaflet-dvf.min.js"></script>-->
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-dvf/0.3.1/leaflet-dvf.markers.min.js"></script> -->



<style>
    html,
    body {
        height: 100%;
        margin: 0;
    }

    #map {
        width: 100%;
        height: 100%;
    }

    .info {
        padding: 6px 8px;
        font: 14px/16px Arial, Helvetica, sans-serif;
        background: white;
        background: rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
    }

    .info h4 {
        margin: 0 0 5px;
        color: #777;
    }

    .legend {
        text-align: left;
        line-height: 18px;
        color: #555;
    }

    #map2 {
        width: 90%;
        height: 800px;
        box-shadow: 5px 5px 5px #888;
    }

    .legend i {
        width: 18px;
        height: 18px;
        float: left;
        margin-right: 8px;
        opacity: 0.7;
    }
    .recuadro i {
        width: 10px;
        height: 10px;
        float: left;
        display: inline-block;
        margin-right: 0.2px;
        opacity: 0.7;
    }
    .recuadro{
        width: 100px;
    }


    .awesome-marker i {
        font-size: 18px;
        margin-top: 8px;
    }

    .zonaLabel {
        background: rgba(70, 3, 226, 0);
        border: 0;
        border-radius: 0px;
        font-family: Arial, Helvetica, sans-serif;
        box-shadow: 0 0px 0px;
    }
</style>

<!-- <div class="container">
    <h1>Mapa de Nuestra se침ora de La Paz</h1>
</div> -->
<div id='map'></div>




<script src="/js/geoJsonC2.js"></script>
<script src="/js/geoJsonDistritosC2.js"></script>
<script src="/js/geoJsonZonasC2.js"></script>



<script>
    var auxRecintos = <%- JSON.stringify(recintos) %>;
    var auxZonas = <%- JSON.stringify(zonas) %>;
    var auxDistritos = <%- JSON.stringify(distritos) %>;
    var auxCircunscripciones = <%- JSON.stringify(circunscripciones) %>;



    var map = L.map('map').setView([-16.51773269488567, -68.11798095703126], 12);

    // L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        attribution: '',
        // id: 'mapbox.light'
    }).addTo(map);


    // control that shows state info on hover
    var info = L.control();

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div;
    };

    info.update = function (props) {
        var textRecintos = '';
        var totalInscritos = 0;
        var totalValidos = 0;
        var totalBlancos = 0;
        var totalNulos = 0;
        var totalEmitidos = 0;
        var totalMas =0;
        if (props) {
            // console.log('TIPO:', props.tipo)
            if (props.tipo == 'zona') {
                var zona = auxZonas.filter(dato => dato.nombre == props.zona);
                var distrito = auxDistritos.filter(dato => dato.id == zona[0].idDistrito);

                var circunscripcion = auxCircunscripciones.filter(dato => dato.id == distrito[0].idCircunscripcion)

                var recintos = auxRecintos.filter(dato => dato.idZona == zona[0].id);

                recintos.forEach(function (recinto) {

                    recinto.mesas.forEach(function (mesa) {
                        totalInscritos += parseInt(mesa.inscritos);
                        totalEmitidos += parseInt(mesa.votosEmitidos);
                        totalValidos += parseInt(mesa.votosValidos);
                        totalBlancos += parseInt(mesa.votosBlancos);
                        totalNulos += parseInt(mesa.votosNulos);
                    }, this);


                }, this);

                textRecintos += '<b>Zona : ' + zona[0].nombre + '</b>' +
                    '<ul class="list-group">' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Inscritos' +
                    // ' <span class="badge badge-dark badge-pill">' + totalInscritos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalEmitidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'V치lidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalValidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + totalBlancos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + totalNulos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalEmitidos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% V치lidos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalValidos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalBlancos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalNulos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '</ul>';
            } else if (props.tipo == 'distrito') {
                // console.log('DISTIRTO,', props.zona)
                var distrito = auxDistritos.filter(dato => dato.nombre == props.zona);

                var circunscripcion = auxCircunscripciones.filter(dato => dato.id == distrito[0].idCircunscripcion)

                var zonas = auxZonas.filter(dato => dato.idDistrito == distrito[0].id);

                zonas.forEach(function (zona) {
                    var recintos = auxRecintos.filter(dato => dato.idZona == zona.id)
                    recintos.forEach(function (recinto) {

                        recinto.mesas.forEach(function (mesa) {
                            totalInscritos += parseInt(mesa.inscritos);
                            totalEmitidos += parseInt(mesa.votosEmitidos);
                            totalValidos += parseInt(mesa.votosValidos);
                            totalBlancos += parseInt(mesa.votosBlancos);
                            totalNulos += parseInt(mesa.votosNulos);
                        }, this);


                    }, this);

                }, this);


                textRecintos += '<b>Distrito : ' + distrito[0].nombre + '</b>' +
                    '<ul class="list-group">' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Inscritos' +
                    // ' <span class="badge badge-dark badge-pill">' + totalInscritos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalEmitidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'V치lidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalValidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + totalBlancos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + totalNulos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalEmitidos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% V치lidos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalValidos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalBlancos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalNulos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '</ul>';
            } else {
                console.log('Circunscripcion,', props.zona)

                var circunscripcion = auxCircunscripciones.filter(dato => dato.nombre == props.zona)

                var distritos = auxDistritos.filter(dato => dato.idCircunscripcion == circunscripcion[0].id);


                distritos.forEach(function (distrito) {
                    var zonas = auxZonas.filter(dato => dato.idDistrito == distrito.id)
                    zonas.forEach(function (zona) {
                        var recintos = auxRecintos.filter(dato => dato.idZona == zona.id)
                        recintos.forEach(function (recinto) {

                            recinto.mesas.forEach(function (mesa) {
                                totalInscritos += parseInt(mesa.inscritos);
                                totalEmitidos += parseInt(mesa.votosEmitidos);
                                totalValidos += parseInt(mesa.votosValidos);
                                totalBlancos += parseInt(mesa.votosBlancos);
                                totalNulos += parseInt(mesa.votosNulos);
                            }, this);


                        }, this);

                    }, this);
                }, this);


                textRecintos += '<b>Circunscripci칩n : ' + circunscripcion[0].nombre + '</b>' +
                    '<ul class="list-group">' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Inscritos' +
                    // ' <span class="badge badge-dark badge-pill">' + totalInscritos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalEmitidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'V치lidos' +
                    ' <span class="badge badge-dark badge-pill">' + totalValidos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + totalBlancos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    'Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + totalNulos + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Emitidos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalEmitidos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% V치lidos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalValidos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Blancos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalBlancos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                    '% Nulos' +
                    ' <span class="badge badge-dark badge-pill">' + ((100 * totalNulos) / totalInscritos).toFixed(2) + '</span>' +
                    '</li>' +
                    '</ul>';
            }





        }
        // this._div.innerHTML = '<h4>Concentraci칩n de votos</h4>' + (props ?
        //     '<b>Circunscripci칩n :  ' + circunscripcion[0].nombre + '</b><br /><b>Distrito :  ' + distrito[0].nombre + '</b><br /><b>Zona :  ' + props.zona + '</b><br /> Recintos ' + textRecintos + ' ' : '');
        this._div.innerHTML = '<h4>Informaci칩n</h4>' + (props ?
            textRecintos : '');
    };

    info.addTo(map);

    function getRandomColor(zona) {
        // console.log('COLOR ZONA:', zona);
        var color = '';
        if (zona) {
            var letters = '0123456789ABCDEF';
            color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
        }

        return color;
    }

    function getOpacidad(zona) {
        // console.log('ZONA:', zona);
        var color = 0.0;
        if (zona) {
            color = 0.5
        }

        return color;
    }


    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.8
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }

        info.update(layer.feature.properties);
    }

    var geojsonC;
    var geojsonD;
    var geojsonZ;
    var auxMarca = {};

    function resetHighlight(e) {
        geojsonZ.resetStyle(e.target);
        info.update();
    }

    function zoomToFeature(e) {
        // console.log('E', e.target)

        // var auxDistrito = auxDistritos.filter(dato => dato.nombre == e.target.feature.properties.zona)
        // var zonas = auxZonas.filter(dato => dato.idDistrito == auxDistrito[0].id);

        //console.log('ZONAS', zonas);


        map.fitBounds(e.target.getBounds());

    }
 
    function onEachFeature(feature, layer) {
        // console.log('LAYER:',layer)

        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: zoomToFeature
        });
        layer.bindTooltip(cambiarNombre(feature.properties), {
            direction: 'center',
            className: 'zonaLabel',
            permanent: true
        });
    }
    function cambiarNombre(layer) {
        
        if (layer.tipo == 'circunscripcion') {

            return 'C_' + layer.zona;
        } else {


            var zona = auxZonas.filter(dato=> dato.nombre == layer.zona);
            var recintos = auxRecintos.filter(dato => zona[0].id== dato.idZona);

            var eleccionZona= []; 
            var suma2005 = 0;
            var suma2009 = 0;
            var suma2014 = 0;     
            var sw=false;
            var porcentajeZona = 0;
            var contadorPuntos=0;
            recintos.forEach(recinto => {

                var eleccion2005 = getNivel(recinto,1);
                var eleccion2009 = getNivel(recinto,3);
                var eleccion2014 = getNivel(recinto,2);
          

                if ((eleccion2005.color == 'green' || eleccion2005.estado == 0) && (eleccion2009.color == 'green' || eleccion2009.estado == 0) && (eleccion2014.color == 'green' || eleccion2014.estado == 0)) {
                    sw=true;
                    contadorPuntos+=3;
                    porcentajeZona+= eleccion2005.raw + eleccion2009.raw + eleccion2014.raw
                }
            });

            
            if(sw){
                return layer.zona + '<div class="card">'+ (porcentajeZona/contadorPuntos).toFixed(2)+'%</div>';
            }else{
                return ''
            }
    
                

            
        }
    } 
    function getColor(layer){
        // console.log('LAYER',layer)
        if(layer.tipo == 'zona'){
        var zona = auxZonas.filter(dato=> dato.nombre == layer.zona);
        var recintos = auxRecintos.filter(dato => zona[0].id== dato.idZona);

        var eleccionZona= []; 
        var suma2005 = 0;
        var suma2009 = 0;
        var suma2014 = 0;     
        var sw=false;
        recintos.forEach(recinto => {

            var eleccion2005 = getNivel(recinto,1);
            var eleccion2009 = getNivel(recinto,3);
            var eleccion2014 = getNivel(recinto,2);
            suma2005+=  eleccion2005.estado;
            suma2009+=  eleccion2009.estado;
            suma2014+=  eleccion2014.estado;

            if ((eleccion2005.color == 'green' || eleccion2005.estado == 0) && (eleccion2009.color == 'green' || eleccion2009.estado == 0) && (eleccion2014.color == 'green' || eleccion2014.estado == 0)) {
                sw=true;
            }
        });
        if(sw){
            return 'green'
        }else{
            return '#FFF'
        }
   
        }else{

        return getRandomColor();
        }
        
    }
    function style(feature) {
        // console.log('FEATURE', feature)
        return {
            weight: 2,
            opacity: 1,
            color: 'black',
            dashArray: '5',
            fillOpacity: getOpacidad(feature.properties.zona),
            fillColor: getColor(feature.properties)
            // fillColor: getRandomColor(feature.properties.zona)
        };
    }

    geojsonZ = L.geoJson(geoZonasCompleto, {
        style: style,
        onEachFeature: onEachFeature
    })
    map.addLayer(geojsonZ);

    map.attributionControl.addAttribution('');


    var legend = L.control({
        position: 'bottomright'
    });

    legend.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info legend'),
            grades = [0, 10, 20, 50, 100, 300, 500, 1000],
            labels = [],
            from, to;
        labels.push('Concentraci칩n');

        labels.push('<i style="background:blue"></i> ' +
            '&ndash; Alta 66 - 100');
        labels.push('<i style="background:green"></i> ' +
            '&ndash; Media 33 - 66');
        labels.push('<i style="background:red"></i> ' +
            '&ndash; Baja 0 - 33');


        div.innerHTML = labels.join('<br>');
        return div;
    };

    legend.addTo(map);

    var titulo = L.control({
        position: 'bottomleft'
    });

    titulo.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info titulo')
        div.innerHTML = '<h4>Nuestra Se침ora de La Paz - GENERAL</h4>';
        return div;
    };

    titulo.addTo(map);

  

    var verdeIcon = new L.Icon({
        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });
    var azulIcon = new L.Icon({
        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    var rojoIcon = new L.Icon({
        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    const rojo = '#fd0000'
    const verde = '#046500'
    const azul = '#143a83';
    const markerHtmlStylesVerde = `
        background-color: ${verde};
        width: 1.1rem;
        height: 1.1rem;
        display: block;
        left: 0rem;
        top: 0em;
        border-radius: 1rem 1rem 0;
        transform: rotate(45deg);
        border: 1px solid #FFFFFF`

    const puntoVerde = L.divIcon({
        className: "my-custom-pin",
        iconAnchor: [0, 14],
        labelAnchor: [-6, 0],
        popupAnchor: [0, -10],
        html : '<div class="recuadro"><span class="badge badge-primary">2005</span>'+
                '<span class="badge badge-success">2014</span>'+
                '<span class="badge badge-danger">2009</span></div>'
        // html:  '<div class="recuadro"><i style="background:blue"></i>'+
        //         '<i style="background:red"></i>'+
        //         '<i style="background:green"></i></div>'
    })

    const markerHtmlStylesAzul = `
        background-color: ${azul};
        width: 1.1rem;
        height: 1.1rem;
        display: block;
        left: -1.5rem;
        top: -1.5rem;
        border-radius: 3rem 3rem 0;
        transform: rotate(45deg);
        border: 1px solid #FFFFFF`

    const puntoAzul = L.divIcon({
        className: "my-custom-pin",
        iconAnchor: [0, 24],
        labelAnchor: [-6, 0],
        popupAnchor: [0, -36],
        html : '<div class="recuadro"><span class="badge badge-primary">2005</span>'+
                '<span class="badge badge-success">2014</span>'+
                '<span class="badge badge-danger">2009</span></div>'
    })

    function removerMarcas() {
        auxRecintos.forEach(function (recinto) {
            map.removeLayer(auxMarca['marca-' + recinto.id])
        }, this);

    }

    function getNivel(recinto, idEleccion){
        var sumaEmitidos = 0;
        var sumaValidos = 0;
        var sumaInscritos = 0;
        var sumaMAS = 0;
        recinto.mesas.forEach(function (mesa) {
            if(mesa.idEleccion == idEleccion){

                sumaEmitidos += parseInt(mesa.votosEmitidos);
                sumaValidos += parseInt(mesa.votosValidos);
                sumaInscritos += parseInt(mesa.inscritos)
                sumaMAS += parseInt(mesa.MAS)
            }
        }, this);

        var porcentajeEmitidos = ((100 * sumaEmitidos) / sumaInscritos).toFixed(2);
        var porcentajeValidos = ((100 * sumaValidos) / sumaInscritos).toFixed(2);

        var procentValidosEmitidos = ((100 * sumaMAS) / sumaValidos).toFixed(2);


        if (procentValidosEmitidos <=33) {
            var aux = Math.round(procentValidosEmitidos);
            return {badge:'danger',color:'red',estado:1,porcentaje:(aux+'%'),raw : aux}
        } else if (procentValidosEmitidos >=66) {
            var aux = Math.round(procentValidosEmitidos);
            return {badge:'primary',color:'blue',estado:3,porcentaje:(aux+'%'),raw : aux}
        }else if(procentValidosEmitidos >33 && procentValidosEmitidos <66) {
            var aux = Math.round(procentValidosEmitidos);
            return {badge:'success',color:'green',estado:2,porcentaje:(aux+'%'),raw : aux}
        }else{
            return {badge:'secondary',color:'grey',estado:3,porcentaje:"N/A",raw : 0}
        }


    // const rojo = '#fd0000'
    // const verde = '#046500'
    // const azul = '#143a83';
    }

    function generarMarcas() {
        auxRecintos.forEach(function (recinto) {
            var sw = false;
            var sumaEmitidos = 0;
            var sumaValidos = 0;
            var sumaInscritos = 0;
           
            //2005
            var eleccion2005 = getNivel(recinto,1)
            var eleccion2014 = getNivel(recinto,2)
            var eleccion2009 = getNivel(recinto,3);
            console.log(eleccion2005);
            var auxIcon;
            var todosNulos = false;

            if(eleccion2005.color == eleccion2009.color && eleccion2005.color == eleccion2014.color){

                if(eleccion2005.color == 'grey'){ 
                    todosNulos = true;
                }
               
                if ((eleccion2005.color == 'green' || eleccion2005.estado == 0) && (eleccion2009.color == 'green' || eleccion2009.estado == 0) && (eleccion2014.color == 'green' || eleccion2014.estado == 0)) {
                    sw=true;
                }
                // const markerHtmlStylesRojo = `
                // background-color: ${eleccion2005.color};
                // width: 1.1rem;
                // height: 1.1rem;
                // display: block;
                // left: -1.5rem;
                // top: -1.5rem;
                // border-radius: 3rem 3rem 0;
                // transform: rotate(45deg);
                // border: 1px solid #FFFFFF`
                // const puntoGlobo = L.divIcon({
                //     className: "my-custom-pin",
                //     iconAnchor: [0, 24],
                //     labelAnchor: [-6, 0],
                //     popupAnchor: [0, -10],
                //     html: `<span style="${markerHtmlStylesRojo}" />`
                    
                // })
                // auxIcon = puntoGlobo;

            }
                const puntoIcon = L.divIcon({
                    className: "my-custom-pin",
                    iconAnchor: [0, 24],
                    labelAnchor: [-6, 0],
                    popupAnchor: [0, -36],
                    html : '<div class="recuadro"><span class="badge badge-'+eleccion2005.badge+'">2005</span>'+
                            '<span class="badge badge-'+eleccion2009.badge+'">2009</span>'+
                            '<span class="badge badge-'+eleccion2014.badge+'">2014</span></div>'+
                            '<div class="recuadro"><span class="badge badge-light">'+eleccion2005.porcentaje+'</span>'+
                            '<span class="badge badge-light">'+eleccion2009.porcentaje+'</span>'+
                            '<span class="badge badge-light">'+eleccion2014.porcentaje+'</span></div>'
                })
                auxIcon = puntoIcon
            
        
            //////////////////////////////// INICIO ///////////////////////////////////

            if (((recinto.latitud != null || recinto.longitud != null) && todosNulos!=true) && 0) {
                sw = false;
                auxMarca['marca-' + recinto.id] = L.marker([recinto.latitud, recinto.longitud], {
                    icon: auxIcon
                })
                .addTo(map);


                var sortMesas = recinto.mesas.sort(function (a, b) {
                    // a must be equal to b
                    return a.nombre - b.nombre;
                });

                var datoMesas = '';
                var totalInscritos = 0;
                var totalValidos = 0;
                var totalBlancos = 0;
                var totalNulos = 0;
                var totalEmitidos = 0;
                sortMesas.forEach(function (mesa) {

                    totalInscritos = totalInscritos + parseInt(mesa.inscritos);
                    totalValidos = totalValidos + parseInt(mesa.votosValidos);
                    totalBlancos = totalBlancos + parseInt(mesa.votosBlancos);
                    totalNulos = totalNulos + parseInt(mesa.votosNulos);
                    totalEmitidos = totalEmitidos + parseInt(mesa.votosEmitidos);
                    datoMesas = datoMesas + '<tr>' +
                        '<th>' + mesa.nombre + '</th>' +
                        '<th>' + mesa.inscritos + '</th>' +
                        '<th>' + mesa.votosValidos + '</th>' +
                        '<th>' + mesa.votosBlancos + '</th>' +
                        '<th>' + mesa.votosNulos + '</th>' +
                        '<th>' + mesa.votosEmitidos + '</th>' +
                        '<th>' + ((100 * mesa.votosValidos) / mesa.inscritos).toFixed(2) + '%</th>' +
                        '<th>' + ((100 * mesa.votosBlancos) / mesa.inscritos).toFixed(2) + '%</th>' +
                        '<th>' + ((100 * mesa.votosNulos) / mesa.inscritos).toFixed(2) + '%</th>' +
                        '<th>' + ((100 * mesa.votosEmitidos) / mesa.inscritos).toFixed(2) + '%</th>' +

                        '</tr>'

                })
                datoMesas = datoMesas + '<tr  class="table-primary">' +
                    '<th>TOTAL </th>' +
                    //'<th>' + totalInscritos + '</th>' +
                    '<th>' + totalValidos + '</th>' +
                    '<th>' + totalBlancos + '</th>' +
                    '<th>' + totalNulos + '</th>' +
                    '<th>' + totalEmitidos + '</th>' +
                    '<th>' + ((100 * totalValidos) / totalInscritos).toFixed(2) + '%</th>' +
                    '<th>' + ((100 * totalBlancos) / totalInscritos).toFixed(2) + '%</th>' +
                    '<th>' + ((100 * totalNulos) / totalInscritos).toFixed(2) + '%</th>' +
                    '<th>' + ((100 * totalEmitidos) / totalInscritos).toFixed(2) + '%</th>' +

                    '</tr>';
                // console.log('DATO MESAS', datoMesas)


                var zona = auxZonas.filter(data => {
                    return data.id == recinto.idZona
                })
                // console.log('ZONA AAA', zona)
                var distrito = auxDistritos.filter(data => {
                    return data.id == zona[0].idDistrito
                })
                var circunscripcion = auxCircunscripciones.filter(data => {
                    return data.id == distrito[0].idCircunscripcion
                })

                var collapse =
                    '<div class="card">' +
                    ' <div class="card-body">' +
                    ' <h6>' + recinto.nombre + '</h6><br>' +
                    'Circunscripcion: ' + circunscripcion[0].nombre + ' - ' + distrito[0].nombre + ' - Zona:' + zona[0].nombre +
                    // '<table class="table">' +
                    // '<thead>' +
                    // '<th>MESA</th>' +
                    ////'<th>Inscritos</th>' +
                    // '<th>Votos Validos</th>' +
                    // '<th>Votos Blancos</th>' +
                    // '<th>Votos Nulos</th>' +
                    // '<th>Votos Emitidos</th>' +
                    // '<th> % Validos</th>' +
                    // '<th> % Blancos</th>' +
                    // '<th> % Nulos</th>' +
                    // '<th> % Emitidos</th>' +
                    // '</thead>' +
                    // '<tbody>' +
                    // datoMesas +
                    // '</tbody>' +
                    // ' </table>' +

                    '</div>' +
                    '</div>';
                // console.log('COLLAPSE', collapse)
                auxMarca['marca-' + recinto.id].bindPopup(
                   collapse
                , {
                        closeOnClick: false,
                        autoClose: false,
                        minWdth: '1000',
                        // maxWidth: 'auto',
                        // autoPan: true,
                        // className: 'custom'
                    })
                    // .openPopup()
                // console.log("MARKA", auxMarca['marca-' + recinto.id])
            }


            ///////////////////////////////////FIN /////////////////////////////////

        }, this);

    }

    generarMarcas();
</script>

<script>
</script>